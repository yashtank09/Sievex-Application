version: '3.8'

services:
  app:
    build: .
    container_name: sieve-application
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://db:3306/sievedb?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false
      - SPRING_DATASOURCE_USERNAME=sieveuser
      - SPRING_DATASOURCE_PASSWORD=sievepass
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - sieve-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  db:
    image: mysql:8.0
    container_name: sieve-db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: rootpass
      MYSQL_DATABASE: sievedb
      MYSQL_USER: sieveuser
      MYSQL_PASSWORD: sievepass
      MYSQL_ROOT_HOST: '%'
    command: --default-authentication-plugin=mysql_native_password
            --character-set-server=utf8mb4
            --collation-server=utf8mb4_unicode_ci
            --max_connections=1000
    volumes:
      - db_data:/var/lib/mysql
      - ./DDLs.sql:/docker-entrypoint-initdb.d/01-ddl.sql
      - ./m_site_ddl.sql:/docker-entrypoint-initdb.d/02-site-ddl.sql
      - ./default_data_script.sql:/docker-entrypoint-initdb.d/03-data.sql
    ports:
      - "3308:3306"
    networks:
      - sieve-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-usieveuser", "-psievepass"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:alpine
    container_name: sieve-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-sievepass} --appendonly yes
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-sievepass}
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    networks:
      - sieve-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  sieve-network:
    driver: bridge

volumes:
  db_data:
  redis_data:
